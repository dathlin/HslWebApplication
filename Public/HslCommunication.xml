<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HslCommunication</name>
    </assembly>
    <members>
        <member name="T:HslCommunication.BasicFramework.FormAbout">
            <summary>
            系统的关于类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAbout.#ctor(System.String,HslCommunication.BasicFramework.SystemVersion,System.Int32,System.String)">
            <summary>
            实例化一个关于系统的窗口对象
            </summary>
            <param name="softName">应用程序的名称</param>
            <param name="sv">系统的版本</param>
            <param name="yearStart">应用起始年份</param>
            <param name="belongName">本系统的版权归属人</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAbout.#ctor(HslCommunication.BasicFramework.SystemVersion,System.Int32,System.String)">
            <summary>
            实例化一个关于系统的窗口对象
            </summary>
            <param name="sv">系统的版本</param>
            <param name="yearStart">版权起始年份</param>
            <param name="belongName">本系统的版权归属人</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAbout.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAbout.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAbout.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormAboutVersion">
            <summary>
            关于版本的信息类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAboutVersion.#ctor(HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            实例化一个版本信息说明的窗口对象
            </summary>
            <param name="sv">系统的版本号</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAboutVersion.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAboutVersion.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAboutVersion.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormAuthorAdvertisement">
            <summary>
            显示作者一些信息的类，应当在软件系统中提供一处链接显示原作者信息，或者以彩蛋方式实现
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.#ctor">
            <summary>
            实例化一个窗口，显示作者的相关信息
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAuthorAdvertisement.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormAuthorize">
            <summary>
            用来测试版软件授权的窗口
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.#ctor(HslCommunication.BasicFramework.SoftAuthorize,System.String,System.Func{System.String,System.String})">
            <summary>
            实例化授权注册窗口
            </summary>
            <param name="authorize"></param>
            <param name="aboutCode">提示关于怎么获取注册码的信息</param>
            <param name="encrypt">加密的方法</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAuthorize.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormInputAndAction">
            <summary>
            支持输入一串字符串并相应数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormInputAndAction.#ctor(System.Func{System.String,System.Boolean},System.String,System.String,System.Int32)">
            <summary>
            实例化一个窗口支持输出和响应
            </summary>
            <param name="action">响应的方法</param>
            <param name="text_default">默认的数据</param>
            <param name="caption">标题</param>
            <param name="length">允许输入的文本的最大长度</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormInputAndAction.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormInputAndAction.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormInputAndAction.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormMatterRemind">
            <summary>
            用于稍微耗时事件处理时的消息框提醒
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormMatterRemind.#ctor(System.String,System.Action)">
            <summary>
            实例化一个耗时处理的对象
            </summary>
            <param name="description">需要显示的文本描述</param>
            <param name="action">需要操作的方法</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormMatterRemind.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormMatterRemind.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormMatterRemind.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormPasswordCheck">
            <summary>
            密码检查的窗口
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPasswordCheck.#ctor(System.String)">
            <summary>
            实例化一个检查输入密码的窗口
            </summary>
            <param name="pass">需要配对的密码</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormPasswordCheck.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPasswordCheck.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPasswordCheck.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormPopup">
            <summary>
            一个用于消息弹出显示的类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.AddNewForm(HslCommunication.BasicFramework.FormPopup)">
            <summary>
            新增一个显示的弹出窗口
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.ResetLocation">
            <summary>
            重置所有弹出窗口的位置
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color,System.Int32)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
            <param name="existTime">指定窗口多少时间后消失，单位毫秒</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.LocationUpMove">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.LocationUpMove(System.Int32)">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormWaitInfomation">
            <summary>
            延时指定时间的窗口类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormWaitInfomation.#ctor(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            实例化一个等待指定显示时间的窗口，时间一到，自动退出
            </summary>
            <param name="info">显示的文本</param>
            <param name="waitTime">等待时间，单位毫秒，最低为100毫秒</param>
            <param name="back">文本的背景色</param>
            <param name="fore">文本的前景色</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormWaitInfomation.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个等待指定显示时间的窗口，时间一到，自动退出
            </summary>
            <param name="info">显示的文本</param>
            <param name="waitTime">等待时间，单位毫秒</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormWaitInfomation.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormWaitInfomation.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormWaitInfomation.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftAnimation">
            <summary>
            系统框架支持的一些常用的动画特效
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAnimation.TimeFragment">
            <summary>
            最小的时间片段
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAnimation.BeginBackcolorAnimation(System.Windows.Forms.Control,System.Drawing.Color,System.Int32)">
            <summary>
            调整控件背景色
            </summary>
            <param name="control">控件</param>
            <param name="color">设置的颜色</param>
            <param name="time">时间</param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftAuthorize">
            <summary>
            软件授权类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.#ctor">
            <summary>
            实例化一个软件授权类
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftAuthorize.TextCode">
            <summary>
            注册码描述文本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.IsReleaseVersion">
            <summary>
            是否正式发行版，是的话就取消授权
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.HasLoadByFile">
            <summary>
            指示是否加载过文件信息
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.IsSoftTrial">
            <summary>
            指示系统是否处于试用运行
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.GetMachineCodeString">
            <summary>
            获取本机的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.ToSaveString">
            <summary>
            获取需要保存的数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.LoadByString(System.String)">
            <summary>
            从字符串加载数据
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.SaveToFile">
            <summary>
            使用特殊加密算法加密数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.LoadByFile">
            <summary>
            使用特殊解密算法解密数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.CheckAuthorize(System.String,System.Func{System.String,System.String})">
            <summary>
            检查该注册码是否是正确的注册码
            </summary>
            <param name="code"></param>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否注册成功</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.IsAuthorizeSuccess(System.Func{System.String,System.String})">
            <summary>
            检测授权是否成功
            </summary>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否成功授权</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.GetInfo">
            <summary>
            获取本计算机唯一的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftFileSaveBase">
            <summary>
            文件存储功能的基类，包含了文件存储路径，存储方法等
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.ToSaveString">
            <summary>
            获取需要保存的数据，需要重写实现
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByString(System.String)">
            <summary>
            从字符串加载数据，需要重写实现
            </summary>
            <param name="content">字符串数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByFile">
            <summary>
            不使用解密方法从文件读取数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的解密方法从文件读取数据
            </summary>
            <param name="decrypt">用户自定义的解密方法</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.SaveToFile">
            <summary>
            不使用加密方法保存数据到文件
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.SaveToFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的加密方法保存数据到文件
            </summary>
            <param name="encrypt">用户自定义的加密方法</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.FileSavePath">
            <summary>
            文件存储的路径
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.LogHelper">
            <summary>
            日志记录类
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftBasic">
            <summary>
            一个软件基础类，提供常用的一些静态方法
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetValueFromJsonObject``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据读取
            </summary>
            <typeparam name="T">读取的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="value_name">值名称</param>
            <param name="default_value">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.JsonSetValue``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据写入
            </summary>
            <typeparam name="T">写入的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="property">值名称</param>
            <param name="value">值数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ShowExceptionMessage(System.Exception)">
            <summary>
            显示一个完整的错误信息
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetExceptionMessage(System.Exception)">
            <summary>
            获取一个异常的完整错误信息
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.Byte[])">
            <summary>
            字节数据转化成16进制表示的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.String)">
            <summary>
            字符串数据转化成16进制表示的字符串
            </summary>
            <param name="InString">输入的字符串数据</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftBasic.FrameworkVersion">
            <summary>
            设置或获取系统框架的版本号
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.DeepClone(System.Object)">
            <summary>
            使用序列化反序列化深度克隆一个对象
            </summary>
            <param name="oringinal"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftMail">
            <summary>
            软件的邮箱类，用于发送邮箱数据，连续发送10次失败则禁止发送
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.SoftMailSendFailedCount">
            <summary>
            系统连续发送失败的次数，为了不影响系统，连续三次失败就禁止发送
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMail.MailSystem163">
            <summary>
            系统提供一个默认的163邮箱发送账号，只要更改接收地址即可发送服务，可能会被拦截
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMail.MailSystemQQ">
            <summary>
            系统提供一个默认的QQ邮箱发送账号，只要更改接收地址即可发送服务，发送成功概率比较高
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.#ctor(System.Action{System.Net.Mail.SmtpClient},System.String,System.String)">
            <summary>
            实例化一个邮箱发送类，需要指定初始化信息
            </summary>
            <param name="mailIni">初始化的方法</param>
            <param name="addr_From">发送地址，应该和账户匹配</param>
            <param name="addr_to">邮件接收地址</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.smtpClient">
            <summary>
            系统的邮件发送客户端
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.MailFromAddress">
            <summary>
            发送邮件的地址
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.MailSendAddress">
            <summary>
            邮件发送的地址
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.Exception)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String)">
            <summary>
            发送邮件至地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.Exception,System.String)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <param name="addtion">额外信息</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String)">
            <summary>
            发送邮件的方法，默认发送别名，优先级，是否HTML
            </summary>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String[],System.String,System.String,System.Net.Mail.MailPriority,System.Boolean)">
            <summary>
            发送邮件的方法，需要提供完整的参数信息
            </summary>
            <param name="addr_from">发送地址</param>
            <param name="name">发送别名</param>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="priority">优先级</param>
            <param name="isHtml">邮件内容是否是HTML语言</param>
            <returns>发生是否成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftMsgQueue`1">
            <summary>
            一个简单通用的消息队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMsgQueue`1.all_items">
            <summary>
            所有临时存储的数据
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMsgQueue`1.MaxCache">
            <summary>
            临时消息存储的最大条数，必须大于10
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMsgQueue`1.CurrentItem">
            <summary>
            获取最新添加进去的数据
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMsgQueue`1.lock_queue">
            <summary>
            将集合进行锁定
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.AddNewItem(`0)">
            <summary>
            新增一条数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.ToSaveString">
            <summary>
            获取存储字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.LoadByString(System.String)">
            <summary>
            获取加载字符串
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:HslCommunication.BasicFramework.MessageBoard">
            <summary>
            系统的消息类，用来发送消息，和确认消息的
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.NameSend">
            <summary>
            发送方名称
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.NameReceive">
            <summary>
            接收方名称
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.SendTime">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.Content">
            <summary>
            发送的消息内容
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.HasViewed">
            <summary>
            消息是否已经被查看
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftNumericalOrder">
            <summary>
            一个用于自动流水号生成的类，必须指定保存的文件，实时保存来确认安全
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            实例化一个流水号生成的对象
            </summary>
            <param name="textHead">流水号的头文本</param>
            <param name="timeFormate">流水号带的时间信息</param>
            <param name="numberLength">流水号数字的标准长度，不够补0</param>
            <param name="fileSavePath">流水号存储的文本位置</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.SaveStatus">
            <summary>
            文件的保存状态
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.CurrentIndex">
            <summary>
            当前的生成序列号
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.TextHead">
            <summary>
            流水号的文本头
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.TimeFormate">
            <summary>
            时间格式默认年月日
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.NumberLength">
            <summary>
            流水号数字应该显示的长度
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.ToSaveString">
            <summary>
            获取流水号的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.LoadByString(System.String)">
            <summary>
            加载流水号
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.ClearNumericalOrder">
            <summary>
            清除流水号计数，进行重新计数
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetNumericalOrder">
            <summary>
            获取流水号数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetNumericalOrder(System.String)">
            <summary>
            获取流水号数据
            </summary>
            <param name="textHead">指定一个新的文本头</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.Paintdata">
            <summary>
            包含整型和字符串描述的数据类型
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Paintdata.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Paintdata.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.GraphicRender">
            <summary>
            图形的呈现方式
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Histogram">
            <summary>
            直方图
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Piechart">
            <summary>
            饼图
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Linegraph">
            <summary>
            折线图
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftPainting">
            <summary>
            静态类，包含了几个常用的画图方法，获取字符串，绘制小三角等
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.GetGraphicFromArray(HslCommunication.BasicFramework.Paintdata[],System.Int32,System.Int32,HslCommunication.BasicFramework.GraphicRender)">
            <summary>
            根据数据生成一个可视化的图形
            </summary>
            <param name="array">数据集合</param>
            <param name="width">需要绘制图形的宽度</param>
            <param name="height">需要绘制图形的高度</param>
            <param name="graphic">指定绘制成什么样子的图形</param>
            <returns>返回一个bitmap对象</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftSecurity">
            <summary>
            字符串加密解密相关的自定义类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Encrypt(System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Encrypt(System.String,System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <param name="Password">密钥，长度为8，英文或数字</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Decrypt(System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Decrypt(System.String,System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <param name="password">密钥，长度为8，英文或数字</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftSqlOperate">
            <summary>
            数据库操作的相关类，包含了常用的方法，避免大量的重复代码
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSql(System.String,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSql(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.String,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.String,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.String,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.ISqlDataType">
            <summary>
            数据库对应类的读取接口
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.ISqlDataType.LoadBySqlDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            根据sdr对象初始化数据的方法
            </summary>
            <param name="sdr"></param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SystemVersion">
            <summary>
            系统版本类，由三部分组成，包含了一个大版本，小版本，修订版，还有一个开发者维护的内部版
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.String)">
            <summary>
            根据格式化字符串的版本号初始化
            </summary>
            <param name="VersionString">格式化的字符串，例如：1.0.0或1.0.0.0503</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
            <param name="inner">内部版本号</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.MainVersion">
            <summary>
            主版本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.SecondaryVersion">
            <summary>
            次版本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.EditVersion">
            <summary>
            修订版
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.InnerVersion">
            <summary>
            内部版本号，或者是版本号表示为年月份+内部版本的表示方式
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.ToString">
            <summary>
            获取版本号的字符串形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_Equality(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断是否相等
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_Inequality(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断是否不相等
            </summary>
            <param name="SV1">第一个版本号</param>
            <param name="SV2">第二个版本号</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_GreaterThan(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断一个版本是否大于另一个版本
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_LessThan(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断第一个版本是否小于第二个版本
            </summary>
            <param name="SV1"></param>
            <param name="SV2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.Equals(System.Object)">
            <summary>
            判断两个实例是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.VersionInfo">
            <summary>
            版本信息类，用于展示版本发布信息
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.ReleaseDate">
            <summary>
            版本的发行日期
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.UpdateDetails">
            <summary>
            版本的更新细节
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.VersionNum">
            <summary>
            版本号
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.VersionInfo.ToString">
            <summary>
            获取版本号
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftLogHelper">
            <summary>
            一个线程安全且高性能的日志记录类，文件格式为txt，编码为ANSI，支持4中消息等级的划分
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.Normal">
            <summary>
            普通的消息等级
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.Information">
            <summary>
            信息的消息等级
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.Warnning">
            <summary>
            警告的消息等级
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.Error">
            <summary>
            错误的消息等级
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftLogHelper.LogSaveFileName">
            <summary>
            日志记录的路径，如果没有设置将不进行保存
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftLogHelper.SaveTimesCount">
            <summary>
            获取或设置日志存储的次数
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.Lock_file_save">
            <summary>
            文件的存储读取锁
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.Lock_list_save">
            <summary>
            日志列表操作的安全锁
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.WaittingForSaveMessage">
            <summary>
            等待存储的日志的集合
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.WriteMessageToFile(System.String)">
            <summary>
            向文件中写入数据，文件路径必须存在
            </summary>
            <param name="str">需要写入的数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.SaveNormal(System.String)">
            <summary>
            用于保存一般日志级别内容的方法
            </summary>
            <param name="str">需要保存的字符串</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.SaveInformation(System.String)">
            <summary>
            用于内部保存日志内容的方法
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.SaveWarnning(System.String)">
            <summary>
            用于内部保存日志内容的方法
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.SaveError(System.String)">
            <summary>
            用于内部保存日志内容的方法
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.SaveNormal(System.String,System.String)">
            <summary>
            用于内部保存日志内容的方法
            </summary>
            <param name="str"></param>
            <param name="degree"></param>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftLogHelper.SaveStatus">
            <summary>
            文件的存储状态，0表示未存储，1表示存储中
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.SaveError(System.String,System.Exception)">
            <summary>
            存储一个异常和简单描述的信息
            </summary>
            <param name="description"></param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.SaveError(System.Exception)">
            <summary>
            用于存储一个异常的方法
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.GetLogText">
            <summary>
            调用此方法可以获得所有的日志信息，可以用来回发给客户端查看
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftLogHelper.ClearLogText">
            <summary>
            用于清空日志的所有内容，可以从外部调用
            </summary>
        </member>
        <member name="T:HslCommunication.CommunicationCode">
            <summary>
            用于本程序集访问通信的暗号说明
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_Check_Secends">
            <summary>
            用于心跳程序的暗号信息
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_String_Text">
            <summary>
            说明发送的只是文本信息
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_User_Bytes">
            <summary>
            发送的数据就是普通的字节数组
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_Client_Quit">
            <summary>
            客户端退出消息
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_Client_Refuse_Login">
            <summary>
            因为客户端达到上限而拒绝登录
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_Client_Allow_Login">
            <summary>
            允许客户端登录到服务器
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_File_Download">
            <summary>
            请求文件下载的暗号
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_File_Upload">
            <summary>
            请求文件上传的暗号
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_File_Check_Right">
            <summary>
            文件校验成功
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_File_Check_Error">
            <summary>
            文件校验失败
            </summary>
        </member>
        <member name="P:HslCommunication.CommunicationCode.Hsl_Protocol_File_Save_Error">
            <summary>
            文件保存失败
            </summary>
        </member>
        <member name="M:HslCommunication.CommunicationCode.CommandBytes(System.String)">
            <summary>
            根据字符串数据生成带有暗号头的数据
            </summary>
            <param name="str_Sended"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.CommunicationCode.CommandBytes(System.Byte[])">
            <summary>
            根据字节数据生成带有暗号头的数据
            </summary>
            <param name="Sended"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Controls.UserButton">
            <summary>
            一个自定义的按钮控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.#ctor">
            <summary>
            实例化一个按钮对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.UIText">
            <summary>
            设置或获取显示的文本
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.TextColor">
            <summary>
            设置或获取显示文本的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.CornerRadius">
            <summary>
            设置按钮的圆角
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.Selected">
            <summary>
            用来设置按钮的选中状态
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.ForeColor">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.Text">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.OriginalColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.EnableColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.ActiveColor">
            <summary>
            鼠标挪动时的活动颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.BorderVisiable">
            <summary>
            设置按钮的边框是否可见
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.CustomerInformation">
            <summary>
            存放用户需要保存的一些额外的信息
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.PerformClick">
            <summary>
            触发一次点击的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘数据区
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:HslCommunication.Controls.UserButton.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserClock">
            <summary>
            一个时钟控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.#ctor">
            <summary>
            实例化一个时钟控件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.当前时间">
            <summary>
            获取时钟的当前时间
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.时钟指针颜色">
            <summary>
            获取或设置时钟指针的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.分钟指针颜色">
            <summary>
            获取或设置时钟分钟指针颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.秒钟指针颜色">
            <summary>
            获取或设置秒钟指针颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.显示文本">
            <summary>
            获取或设置时钟的个性化文本
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.显示文本字体">
            <summary>
            字体
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件显示
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:HslCommunication.Controls.UserClock.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.File_Save">
            <summary>
            用来保存的文件信息类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.FileName">
            <summary>
            文件的名称
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.FileSize">
            <summary>
            文件的大小
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.FileTag">
            <summary>
            用于用户自定义的标识
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.UploadName">
            <summary>
            文件的上传人
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.UploadDate">
            <summary>
            文件的上传日期
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.FileNote">
            <summary>
            文件的描述，说明备注
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.FilePath">
            <summary>
            文件在服务器的实际存储路径
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.FileDownloadTimes">
            <summary>
            文件被下载的次数
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.File_Save.FileExc">
            <summary>
            文件的后缀名
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.File_Save.GetTextFromFileSize">
            <summary>
            获取大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.File_Save.GetFileIcon">
            <summary>
            获取文件对象显示图标
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.File_Save.GetFileRenderIcon(System.String)">
            <summary>
            根据文件后缀选择需要对应显示的文件图标，包含了二十多种常用文件的图标
            </summary>
            <param name="exc">文件的扩展名</param>
            <returns>图形对象</returns>
        </member>
        <member name="T:HslCommunication.Enthernet.SimpleShareFileServer">
            <summary>
            一个简单的共享文件类，配合下载控件和上传窗口一起使用，适用于系统公共的文件管理
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.SimpleShareFileServer.File_head_download">
            <summary>
            文件的下载指令头
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.SimpleShareFileServer.File_head_upload">
            <summary>
            文件的上传指令头
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.SimpleShareFileServer.File_head_delete">
            <summary>
            文件删除的指令头
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.#ctor">
            <summary>
            生成对象，需要指定存储规则
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.SimpleShareFileServer.FileSavePath">
            <summary>
            临时文件存储的路径
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.File_Count">
            <summary>
            返回所有文件的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.AddNew(HslCommunication.Enthernet.File_Save)">
            <summary>
            新增一个文件对象
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.DeleteOne(System.String)">
            <summary>
            根据文件名称，删除一个文件对象
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.DownloadTimesAdd(System.String)">
            <summary>
            追加一个文件对象的下载数据
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.IsFileExsist(System.String)">
            <summary>
            判断文件对对象管理中是否存在
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.GetHuFileFromFileName(System.String)">
            <summary>
            根据
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.ToJsonString">
            <summary>
            获取JSON字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.SaveLocalFile">
            <summary>
            将所有数据进行保存
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.ReadFromFile">
            <summary>
            从文件中加载数据信息
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.SimpleShareFileServer.File_save_path">
            <summary>
            文件的存储路径
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.ServerStart(System.Int32)">
            <summary>
            启动文件服务引擎
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.ThreadPoolLogin(System.Object)">
            <summary>
            请求接入的回调方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.ReceiveCallback(System.IAsyncResult)">
            <summary>
            在收到客户端下载完毕的消息后选中关闭本次连接
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.SimpleShareFileServer.NoticeClient">
            <summary>
            提醒客户端的委托
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.SimpleShareFileServer.FileChange">
            <summary>
            当服务器文件变化时，有文件删除或是添加时，触发的事件，可以选中通知客户端刷新数据
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.SimpleShareFileServer.OnFileChange">
            <summary>
            刷新客户端的文件信息
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.Net_File_Server">
            <summary>
            文件传送类服务器，仅仅负责数据传送部分，不负责数据库的存储
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_File_Server.FilesPath">
            <summary>
            所有文件存储的根目录 默认D盘Files文件夹
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_File_Server.ServerStart(System.Int32)">
            <summary>
            启动服务器的引擎
            </summary>
            <param name="port">指定一个端口号</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_File_Server.ServerClose">
            <summary>
            关闭服务器的引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_File_Server.ThreadPoolLogin(System.Object)">
            <summary>
            处理数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_File_Server.ReceiveCallBack(System.IAsyncResult)">
            <summary>
            用来确认文件是否发送完成的
            </summary>
            <param name="ir"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.Net_Socket_Server">
            <summary>
            基于TCP的服务器引擎端核心类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Server.ConnectMax">
            <summary>
            所支持的同时在线客户端的最大数量，商用限制1000个，最小10个
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Server.FormatClientOnline">
            <summary>
            客户端在线信息显示的格式化文本，如果自定义，必须#开头，
            示例："#IP:{0} Name:{1}"
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Server.AllClients">
            <summary>
            所有客户端的在线信息，使用#符号分隔开来
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Server.IsSaveLogClientLineChange">
            <summary>
            获取或设置服务器是否记录客户端上下线信息
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Server.ClientCount">
            <summary>
            所有在线客户端的数量
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Server.All_sockets_connect">
            <summary>
            所有的客户端连接的核心对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Server.Lock_sockets_operate">
            <summary>
            客户端数组操作的线程锁
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.ServerStart(System.Int32)">
            <summary>
            启动引擎
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.ServerClose">
            <summary>
            关闭引擎
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Server.MessageAlerts">
            <summary>
            服务器的异常，启动，等等一般消息产生的时候，出发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Server.ClientOnline">
            <summary>
            当客户端上线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Server.ClientOffline">
            <summary>
            当客户端下线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Server.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Server.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.ThreadPoolLogin(System.Object)">
            <summary>
            登录后的处理方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.HeadReceiveCallback(System.IAsyncResult)">
            <summary>
            指令头接收方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.ContentReceiveCallback(System.IAsyncResult)">
            <summary>
            数据内容接收方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.Send(HslCommunication.Enthernet.AsyncStateOne,System.String)">
            <summary>
            服务器端用于数据发送文本的方法
            </summary>
            <param name="stateone">数据发送对象</param>
            <param name="str">发送的文本</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.Send(HslCommunication.Enthernet.AsyncStateOne,System.Byte[])">
            <summary>
            服务器端用于发送字节的方法
            </summary>
            <param name="stateone">数据发送对象</param>
            <param name="bytes">实际发送的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.SendAllClients(System.String)">
            <summary>
            服务端用于发送所有数据到所有的客户端
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Server.SendAllClients(System.Byte[])">
            <summary>
            服务端用于发送所有数据到所有的客户端
            </summary>
            <param name="data">需要群发客户端的字节数据</param>
        </member>
        <member name="T:HslCommunication.Enthernet.Net_Socket_Client">
            <summary>
            基于TCP通信的客户端核心类
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.Net_Socket_Client.stateone">
            <summary>
            客户端的核心连接块
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Client.Is_Client_Start">
            <summary>
            客户端系统是否启动
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Client.Connect_Failed_Count">
            <summary>
            重连接失败的次数
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.Net_Socket_Client.Is_Client_Connecting">
            <summary>
            指示客户端是否处于正在连接服务器中
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.Net_Socket_Client.lock_connecting">
            <summary>
            登录服务器的判断锁
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Client.ClientAlias">
            <summary>
            客户端登录的标识名称，可以为ID号，也可以为登录名
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Client.EndPointServer">
            <summary>
            远程服务器的IP地址和端口
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_Socket_Client.DelayTime">
            <summary>
            系统与服务器的延时时间，单位毫秒
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Client.LoginSuccess">
            <summary>
            客户端启动成功的事件，重连成功也将触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Client.LoginFailed">
            <summary>
            连接失败时触发的事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Client.MessageAlerts">
            <summary>
            服务器的异常，启动，等等一般消息产生的时候，出发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Client.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Socket_Client.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Client.ClientClose">
            <summary>
            关闭该客户端引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Client.ClientStart">
            <summary>
            启动客户端引擎，连接服务器系统
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Client.HeadReceiveCallback(System.IAsyncResult)">
            <summary>
            指令头接收方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Client.ContentReceiveCallback(System.IAsyncResult)">
            <summary>
            数据内容接收方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Client.Send(System.String)">
            <summary>
            服务器端用于数据发送文本的方法
            </summary>
            <param name="str">发送的文本</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Client.Send(System.Byte[])">
            <summary>
            服务器端用于发送字节的方法
            </summary>
            <param name="bytes">实际发送的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Socket_Client.ThreadHeartCheck">
            <summary>
            心跳线程的方法
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.Net_Simplify_Client">
            <summary>
            用户同步访问数据的客户端类
            在客户端设置参数后，调用方法即可成功读取服务器数据，甚至是文件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Client.#ctor(System.Net.IPEndPoint)">
            <summary>
            实例化一个客户端的对象，用于和服务器通信
            </summary>
            <param name="end_point">服务器的通信地址</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Client.ReadFromServer(System.String)">
            <summary>
            客户端向服务器进行请求，请求字符串数据
            </summary>
            <param name="send"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Client.ReadFromServer(System.Byte[])">
            <summary>
            客户端向服务器进行请求，请求字节数据
            </summary>
            <param name="send"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Client.ReadFromServerBase(System.Byte[],System.Int32)">
            <summary>
            需要发送的底层数据
            </summary>
            <param name="send">需要发送的底层数据</param>
            <param name="headcode">数据的指令头</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.Net_Simplify_Server">
            <summary>
            同步数据交换的服务器端类，先配置相关的参数，再启动系统
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Server.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Simplify_Server.ReceiveStringEvent">
            <summary>
            接收字符串信息的事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.Net_Simplify_Server.ReceivedBytesEvent">
            <summary>
            接收字节信息的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Server.ServerStart(System.Int32)">
            <summary>
            启动服务器的引擎
            </summary>
            <param name="port">指定一个端口号</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Server.ServerClose">
            <summary>
            关闭引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Server.SendMessage(HslCommunication.Enthernet.AsyncStateBase,System.String)">
            <summary>
            向指定的通信对象发送字符串数据
            </summary>
            <param name="socket">通信对象</param>
            <param name="str">实际发送的字符串数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Server.SendMessage(HslCommunication.Enthernet.AsyncStateBase,System.Byte[])">
            <summary>
            向指定的通信对象发送字节数据
            </summary>
            <param name="socket"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_Simplify_Server.ThreadPoolLogin(System.Object)">
            <summary>
            处理请求接收连接后的方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.Net_SoftUpdate_Server">
            <summary>
            用于服务器支持软件全自动更新升级的类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.Net_SoftUpdate_Server.FileUpdatePath">
            <summary>
            系统升级时客户端所在的目录，默认为C:\HslCommunication
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_SoftUpdate_Server.ServerStart(System.Int32)">
            <summary>
            启动服务器的引擎
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_SoftUpdate_Server.ServerClose">
            <summary>
            关闭引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.Net_SoftUpdate_Server.ThreadPoolLogin(System.Object)">
            <summary>
            系统的登录方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.FileItemShow">
            <summary>
            文件显示的子控件类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileItemShow.#ctor(System.String,System.Int32,System.Func{System.Boolean})">
            <summary>
            生成一个文件对象的显示控件
            </summary>
            <param name="serverIp">服务器的IP地址</param>
            <param name="serverPort">服务器的端口号</param>
            <param name="deleteCheck">用户自定义的删除确认委托，可用于验证权限及密码</param>
        </member>
        <member name="P:HslCommunication.Enthernet.FileItemShow.ServerIp">
            <summary>
            服务器的IP地址
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileItemShow.ServerPort">
            <summary>
            服务器的端口号
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileItemShow.SetFile(HslCommunication.Enthernet.File_Save,System.Func{System.Boolean})">
            <summary>
            设置文件数据
            </summary>
            <param name="file">文件的信息对象</param>
            <param name="deleteEnable">删除控件的使能委托</param>
        </member>
        <member name="F:HslCommunication.Enthernet.FileItemShow.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileItemShow.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Enthernet.FileItemShow.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.FileOperateControl">
            <summary>
            上传或下载的控件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.#ctor(System.Guid,System.Net.IPEndPoint,System.String,System.String,System.String,System.String)">
            <summary>
            上传的实例化方法
            </summary>
            <param name="token">网络令牌</param>
            <param name="endpoint">服务器的端口地址</param>
            <param name="filepath">完整的文件路径</param>
            <param name="factory">文件所属的工厂</param>
            <param name="group">文件所属的分类</param>
            <param name="id">文件所属的设备ID</param>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.#ctor(System.Guid,System.Net.IPEndPoint,System.String,System.String)">
            <summary>
            下载的实例化方法
            </summary>
            <param name="token">网络令牌</param>
            <param name="endpoint">服务器的端口地址</param>
            <param name="filepath">服务器的文件路径</param>
            <param name="savepath">本地保存的路径</param>
        </member>
        <member name="P:HslCommunication.Enthernet.FileOperateControl.IpEndServer">
            <summary>
            服务器地址终结点
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileOperateControl.IsOperateFinished">
            <summary>
            指示本次上传或是下载是否结束
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileOperateControl.FilePath">
            <summary>
            文件的原始路径
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileOperateControl.Factory">
            <summary>
            文件所属的工厂分类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileOperateControl.Group">
            <summary>
            文件所属的类别
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileOperateControl.Id">
            <summary>
            文件所属的特殊ID
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileOperateControl.SavaPathDirectory">
            <summary>
            文件保存的路径，文件下载的时候所需的
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.StartUploadFile">
            <summary>
            开始上传文件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.ThreadPoolCheckConnect(System.Object)">
            <summary>
            检查超时的子线程
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.StartDownloadFile">
            <summary>
            启动下载文件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.StartDownloadFileAsync">
            <summary>
            启动一个异步的下载方法
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.FileOperateControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Enthernet.FileOperateControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.FormFileOperate">
            <summary>
            用于文件上传或下载的窗口
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FormFileOperate.#ctor(System.Guid,System.Net.IPEndPoint,System.String[],System.String,System.String,System.String)">
            <summary>
            实例化一个文件上传的窗口
            </summary>
            <param name="token">网络令牌</param>
            <param name="endpoint">服务器远程地址</param>
            <param name="files">等待上传的文件数组</param>
            <param name="factory">工厂大类</param>
            <param name="group">分类</param>
            <param name="id">设备序号</param>
        </member>
        <member name="M:HslCommunication.Enthernet.FormFileOperate.#ctor(System.Guid,System.Net.IPEndPoint,System.String[],System.String)">
            <summary>
            实例化一个文件下载的窗口
            </summary>
            <param name="token">网络令牌</param>
            <param name="endpoint">服务器的远程地址</param>
            <param name="files">等待下载的文件</param>
            <param name="savepath">保存路径</param>
        </member>
        <member name="P:HslCommunication.Enthernet.FormFileOperate.is_down_file">
            <summary>
            是否是下载文件操作
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.FormFileOperate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FormFileOperate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.Enthernet.FormFileOperate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.FormSimplyFileUpload">
            <summary>
            用于文件上传的类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FormSimplyFileUpload.#ctor(System.String,System.Int32,System.String)">
            <summary>
            实例化一个文件上传的窗口
            </summary>
            <param name="serverIp">服务器的IP地址</param>
            <param name="serverPort">服务器的端口号</param>
            <param name="uploadName">文件上传人的名称</param>
        </member>
        <member name="P:HslCommunication.Enthernet.FormSimplyFileUpload.ServerIp">
            <summary>
            服务器的IP地址
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FormSimplyFileUpload.ServerPort">
            <summary>
            服务器的端口号
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FormSimplyFileUpload.UploadName">
            <summary>
            文件长传人的名称
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.FormSimplyFileUpload.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FormSimplyFileUpload.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.Enthernet.FormSimplyFileUpload.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.AsyncStateBase">
            <summary>
            异步状态的基类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateBase.WorkSocket">
            <summary>
            传输数据的对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AsyncStateBase.GetRemoteEndPoint">
            <summary>
            获取远程的网络地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.AsyncStateBase.BytesSizeToString(System.Int32)">
            <summary>
            获取指定长度的数据的文本描述
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.AsyncStateSend">
            <summary>
            发送数据的异步状态
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateSend.Content">
            <summary>
            发送的数据内容
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateSend.AlreadySendLength">
            <summary>
            已经发送长度
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.AsyncStateOne">
            <summary>
            异步多客户端网络的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne._IpEnd_Point">
            <summary>
            此连接对象连接的远程客户端
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.LoginAlias">
            <summary>
            远程对象的别名
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne._Heart_Time">
            <summary>
            心跳验证的时间点
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.AsyncStateOne.UdpEndPoint">
            <summary>
            UDP通信中的远程端
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.HeadLength">
            <summary>
            头子节数据标准长度
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.BytesHead">
            <summary>
            指令头缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.AlreadyReceivedHead">
            <summary>
            已经接收的指令头长度
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.BytesContent">
            <summary>
            数据内容缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.AlreadyReceivedContent">
            <summary>
            已经接收的数据内容长度
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AsyncStateOne.Clear">
            <summary>
            清除本次的接收内容
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.FileStateOne">
            <summary>
            用于文件传输的时候的封装对象
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.FileStateOne.ReceiveBuffer">
            <summary>
            用来缓冲长度的字节
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileStateOne.AlreadyReceivedLength">
            <summary>
            已经接收或上传的数据长度，用来判断接收是否完成的依据
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.FileStateOne.SendBuffer">
            <summary>
            用于发送数据的
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileStateOne.AlreadySendLength">
            <summary>
            已经发送的数据长度，用来判定是否发送完成的依据
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileStateOne.WorkSocket">
            <summary>
            通信用的socket
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileStateOne.ConnectTime">
            <summary>
            套接字的连接时间
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileStateOne.BytesSizeToString(System.Int32)">
            <summary>
            获取指定长度的数据的文本描述
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileStateOne.Close">
            <summary>
            关闭网络资源
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileStateOne.IsFinishOperate">
            <summary>
            指示本操作是否完成，也可能因为意外终止
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileStateOne.FileContentLength">
            <summary>
            文件的长度
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileStateOne.LastReceivedLength">
            <summary>
            上次已接收或已上传的长度，用来计算网速
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileStateOne.RenderInformation(System.Boolean)">
            <summary>
            用于显示的消息内容
            </summary>
            <param name="is_download"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.NetBase">
            <summary>
            一个网络通信类的基础类
            </summary>
        </member>
        <member name="P:HslCommunication.NetBase.WorkSocket">
            <summary>
            用于通信工作的核心对象
            </summary>
        </member>
        <member name="P:HslCommunication.NetBase.KeyToken">
            <summary>
            当前对象的身份令牌，用来在网络通信中标识唯一的验证
            </summary>
        </member>
        <member name="M:HslCommunication.NetBase.IsTwoBytesEquel(System.Byte[],System.Byte[])">
            <summary>
            判断两个字节是否相同
            </summary>
            <param name="b1">第一个字节</param>
            <param name="b2">第二个字节</param>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.NetBase.ConnectTimeout">
            <summary>
            网络访问中的超时时间，单位：毫秒，默认值2200
            </summary>
        </member>
        <member name="M:HslCommunication.NetBase.ThreadPoolCheckConnect(System.Object)">
            <summary>
            检查超时的子线程
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.NetBase.ReadFromSocket(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            读取socket数据的基础方法
            </summary>
            <param name="socket">通信对象</param>
            <param name="receive">接收的长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetBase.ReadFromSocketAndWriteStream(System.IO.FileStream,System.Net.Sockets.Socket,System.Int32,System.Boolean)">
            <summary>
            读取socket指定长度数据并写入文件流中
            </summary>
            <param name="fs">支持写入的文件流</param>
            <param name="socket">连接的套接字</param>
            <param name="receive">指定接收长度</param>
            <param name="is_response">是否回发进度</param>
        </member>
        <member name="M:HslCommunication.NetBase.ReadFromSocketAndWriteStream(System.IO.FileStream,HslCommunication.Enthernet.FileStateOne,System.Int32,System.Boolean)">
            <summary>
            读取socket指定长度数据并写入文件流中
            </summary>
            <param name="fs">支持写入的文件流</param>
            <param name="receive">指定接收长度</param>
            <param name="is_response">是否回发进度</param>
            <param name="stateone">套接字的属性</param>
        </member>
        <member name="M:HslCommunication.NetBase.ReadFromStreamAndWriteSocket(System.IO.FileStream,System.Net.Sockets.Socket,System.Int32)">
            <summary>
            读取文件流并将数据写入socket
            </summary>
            <param name="fs">文件流</param>
            <param name="socket">连接的套接字</param>
            <param name="send_length">要写入的长度</param>
        </member>
        <member name="T:HslCommunication.NetBase.IEDelegate">
            <summary>
            不带参数的委托
            </summary>
        </member>
        <member name="T:HslCommunication.NetBase.IEDelegate`1">
            <summary>
            带一个参数的委托
            </summary>
            <typeparam name="T1">T1</typeparam>
            <param name="object1"></param>
        </member>
        <member name="T:HslCommunication.NetBase.IEDelegate`2">
            <summary>
            带二个参数的委托
            </summary>
            <typeparam name="T1">T1</typeparam>
            <typeparam name="T2">T2</typeparam>
            <param name="object1">object1</param>
            <param name="object2">object2</param>
        </member>
        <member name="M:HslCommunication.NetBase.ByteToHexString(System.Byte[])">
            <summary>
            将字节数组转化为16进制的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <returns>字符串</returns>
        </member>
        <member name="T:HslCommunication.NetComplexBase">
            <summary>
            客户端服务端都拥有的一些方法
            </summary>
        </member>
        <member name="M:HslCommunication.NetComplexBase.SendBytesAsync(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送数据的方法
            </summary>
            <param name="socket">通信用的核心对象</param>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.NetComplexBase.SendCallBack(System.IAsyncResult)">
            <summary>
            发送回发方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.NetComplexBase.DoWithException(System.String,System.Exception)">
            <summary>
            处理异常的方法，该方法需要在服务器端进行重写
            </summary>
            <param name="description"></param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.NetComplexBase.TranslateDataToSend(System.Byte[],System.Int32)">
            <summary>
            用于同步通信中数据转换成实际发送的数据
            </summary>
            <param name="send">等待发送的数据</param>
            <param name="headcode">数据头</param>
            <returns>实际发送的数据</returns>
        </member>
        <member name="P:HslCommunication.NetComplexBase.IsSocketClosedAfterFinished">
            <summary>
            指示是否在发送结束后关闭套接字
            </summary>
        </member>
        <member name="T:HslCommunication.NetServerBase">
            <summary>
            所有服务器类对象的基类，添加了一些服务器属性
            </summary>
        </member>
        <member name="P:HslCommunication.NetServerBase.IsStarted">
            <summary>
            服务器引擎是否启动
            </summary>
        </member>
        <member name="M:HslCommunication.NetServerBase.AsyncAcceptCallback(System.IAsyncResult)">
            <summary>
            异步传入的连接申请请求
            </summary>
            <param name="iar"></param>
        </member>
        <member name="M:HslCommunication.NetServerBase.ThreadPoolLogin(System.Object)">
            <summary>
            登录回调方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.NetServerBase.ServerStart(System.Int32)">
            <summary>
            启动服务器的引擎
            </summary>
            <param name="port">指定一个端口号</param>
        </member>
        <member name="M:HslCommunication.NetServerBase.ServerClose">
            <summary>
            关闭服务器的引擎
            </summary>
        </member>
        <member name="P:HslCommunication.NetServerBase.LogHelper">
            <summary>
            日志保存类
            </summary>
        </member>
        <member name="M:HslCommunication.NetServerBase.DoWithException(System.String,System.Exception)">
            <summary>
            存储错误日志
            </summary>
            <param name="description">描述</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:HslCommunication.CoordinationStatus">
            <summary>
            线程的协调逻辑状态
            </summary>
        </member>
        <member name="F:HslCommunication.CoordinationStatus.AllDone">
            <summary>
            所有项完成
            </summary>
        </member>
        <member name="F:HslCommunication.CoordinationStatus.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:HslCommunication.CoordinationStatus.Cancel">
            <summary>
            任务取消
            </summary>
        </member>
        <member name="T:HslCommunication.AsyncCoordinator">
            <summary>
            一个线程协调逻辑类，详细参考书籍《CLR Via C#》page:681
            </summary>
        </member>
        <member name="M:HslCommunication.AsyncCoordinator.AboutToBegin(System.Int32)">
            <summary>
            每次的操作任务开始前必须调用该方法
            </summary>
            <param name="opsToAdd"></param>
        </member>
        <member name="M:HslCommunication.AsyncCoordinator.JustEnded">
            <summary>
            在一次任务处理好操作之后，必须调用该方法
            </summary>
        </member>
        <member name="M:HslCommunication.AsyncCoordinator.AllBegun(System.Action{HslCommunication.CoordinationStatus},System.Int32)">
            <summary>
            该方法必须在发起所有的操作之后调用
            </summary>
            <param name="callback">回调方法</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:HslCommunication.AsyncCoordinator.TimeExpired(System.Object)">
            <summary>
            超时的方法
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:HslCommunication.AsyncCoordinator.Cancel">
            <summary>
            取消任务的执行
            </summary>
        </member>
        <member name="M:HslCommunication.AsyncCoordinator.ReportStatus(HslCommunication.CoordinationStatus)">
            <summary>
            生成一次报告
            </summary>
            <param name="status">报告的状态</param>
        </member>
        <member name="M:HslCommunication.AsyncCoordinator.Maxinum(System.Int32@,System.Func{System.Int32,System.Int32})">
            <summary>
            乐观的并发方法模型，具体参照《CLR Via C#》page:686
            </summary>
            <param name="target">唯一的目标数据</param>
            <param name="change">修改数据的算法</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.OperateResultBase">
            <summary>
            操作结果的类
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResultBase.IsSuccess">
            <summary>
            指示本次访问是否成功
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResultBase.Message">
            <summary>
            具体的错误描述
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResultBase.ErrorCode">
            <summary>
            具体的错误代码
            </summary>
        </member>
        <member name="M:HslCommunication.OperateResultBase.ToMessageShowString">
            <summary>
            获取错误代号及文本描述
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.OperateResultString">
            <summary>
            操作结果的字符串类
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResultString.Content">
            <summary>
            实际的数据
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResultBytes">
            <summary>
            操作结果的字节数组类
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResultBytes.Content">
            <summary>
            实际的数据
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecNetBase">
            <summary>
            三菱网络类基类，提供三菱基础数据和方法
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecNetBase.NetworkNumber">
            <summary>
            获取或设置PLC所在的网络号，一般都为0
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecNetBase.NetworkStationNumber">
            <summary>
            获取或设置PLC所在网络的站号，一般都为0
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.ReceiveBytesTranslate(System.Byte[])">
            <summary>
            当读取位数据时，进行相对的转化
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.GetLengthFromPlcType(HslCommunication.Profinet.MelsecDataType,System.Int32)">
            <summary>
            根据读取的数据类型和长度返回最终生成的数据
            </summary>
            <param name="type">数据类型</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.BoolTranslateBytes(System.Boolean[])">
            <summary>
            将BOOL变量数组转化成可写入PLC的字节数据
            </summary>
            <param name="data">bool数组</param>
            <returns>可写入PLC的字节数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.SingularTurnEven(System.Byte[])">
            <summary>
            根据字节数据进行补齐偶数位
            </summary>
            <param name="bytes">数据</param>
            <returns>补齐后的数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.GetReadCommand(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="type">类型</param>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.GetWriteCommand(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Byte[])">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecNet">
            <summary>
            数据访问类，用于计算机和三菱PLC的以太网模块通讯的类
            通讯协议为基于以太网的QnA兼容3E帧协议
            只支持同步访问方式，必须先配置网络参数
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadFromPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="type">想要读取的数据类型</param>
            <param name="address">读取数据的起始地址</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带数据头的字节数组</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String)">
            <summary>
            向PLC写入ASCII编码字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            向PLC写入指定长度ASCII编码字符串数据，超过截断，不够补0，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <param name="length">指定写入长度，必须为偶数</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String)">
            <summary>
            使用Unicode编码向PLC写入字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            使用Unicode编码向PLC写入指定长度的字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <param name="length">指定字符串的长度</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Boolean[])">
            <summary>
            向PLC写入数据，针对X,Y,M,L的方式，数据为通断的信号
            data数组长度必须为偶数，否则报错
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">通断信号的数组</param>
            <exception cref="T:System.Exception"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为无符号的ushort数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">无符号的ushort数组</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Int16[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为有符号的short数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">有符号的short数组</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">原始的字节数据</param>
            <returns>结果</returns>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecNetMultiAsync">
            <summary>
            异步的多PLC请求类，可以同时并发的向多个PLC发起请求，该类使用非阻塞的高性能方式实现
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetMultiAsync.#ctor(System.Byte,System.Byte,HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16,System.Int32,System.Int32,System.Net.IPAddress[],System.Int32,System.Int32)">
            <summary>
            实例化一个多PLC请求的对象
            </summary>
            <param name="networkNumber">要求所有网络号一致</param>
            <param name="networkStationNumber">要求所有站号一致</param>
            <param name="type">要求所有读取类型一致</param>
            <param name="address">要求所有起始地址一致</param>
            <param name="length">要求所有读取数据长度一致</param>
            <param name="timeout">连接PLC过程中的超时时间</param>
            <param name="readCycle">每次请求访问的间隔时间</param>
            <param name="allAddress">所有等待访问的PLC的IP地址</param>
            <param name="portMain">访问PLC时的主端口</param>
            <param name="portBackup">访问PLC时的备用端口</param>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.ReadCycle">
            <summary>
            访问周期
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.ConnectStatus">
            <summary>
            系统的连接状态，0未连接，1连接中
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.BytesResult">
            <summary>
            用于存储结果的字节数组
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.EveryMachineLength">
            <summary>
            每台设备的长度
            </summary>
        </member>
        <member name="E:HslCommunication.Profinet.MelsecNetMultiAsync.OnReceivedData">
            <summary>
            接收到所有的PLC数据时候触发
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetMultiAsync.ThreadDealWithTimeout">
            <summary>
            维护超时连接的线程方法
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecDataType">
            <summary>
            三菱PLC的数据类型，此处只包含了几个常用的类型
            X,Y,M,D,W,L
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecDataType.#ctor(System.Byte,System.Byte)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.W">
            <summary>
            W链接寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.L">
            <summary>
            L锁存继电器
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.Index">
            <summary>
            在数组中的位置
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PortMain">
            <summary>
            主要访问的PLC端口
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PortBackup">
            <summary>
            备用访问的PLC端口
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PlcIpAddress">
            <summary>
            PLC的IP地址
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.WorkSocket">
            <summary>
            用于工作的套接字对象
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.IsConnect">
            <summary>
            连接是否成功
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PlcDataHead">
            <summary>
            头子节
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.LengthDataHead">
            <summary>
            头子节接收长度
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PlcDataContent">
            <summary>
            接收的PLC实际数据
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.LengthDataContent">
            <summary>
            实际数据的接收长度
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.PlcNetBase">
            <summary>
            以太网模块访问的基类
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetPort">
            <summary>
            获取访问的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.ChangePort">
            <summary>
            更换端口号
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PortRead">
            <summary>
            读取数据的端口，默认为1000
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PortReadBackup">
            <summary>
            读取数据的备用端口，默认为1000，当一次请求失败时，将会自动切换端口
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PortWrite">
            <summary>
            写入数据端口，默认为1001
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PLCIpAddress">
            <summary>
            远程PLC的IP地址，默认为192.168.0.2
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.AddVoidHead(System.Byte[],System.Int32)">
            <summary>
            追加字节数据的头部空字节
            </summary>
            <param name="bytes">实际数据</param>
            <param name="length">追加的长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.ManageBytesLength(System.Byte[],System.Int32)">
            <summary>
            控制字节长度，超出选择截断，不够补零
            </summary>
            <param name="bytes">字节数据</param>
            <param name="length">最终需要的目标长度</param>
            <returns>处理后的数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetBytesFromArray(System.Int16[])">
            <summary>
            根据数据的数组返回真实的数据字节
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetBytesFromArray(System.UInt16[])">
            <summary>
            根据数据的数据返回真实的数据字节
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetArrayFromBytes(System.Byte[])">
            <summary>
            根据底层的数据情况返回转换后的数组
            </summary>
            <param name="bytes">真实的数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetShortFromBytes(System.Byte[],System.Int32)">
            <summary>
            从指定的字节数据中提取指定位置的short值
            </summary>
            <param name="content">读取的字节数组</param>
            <param name="index">索引</param>
            <returns>实际值</returns>
        </member>
        <member name="T:HslCommunication.Profinet.SiemensNet">
            <summary>
            数据访问类，用于计算机和西门子PLC的以太网模块通讯的类
            通讯协议为基于以太网的FETCH/WRITE协议
            想要访问成功，必须先配置PLC的网络
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.ReadFromPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.UInt16)">
            <summary>
            从西门子PLC中读取想要的数据，返回结果类说明
            </summary>
            <param name="type">想要读取的数据类型</param>
            <param name="address">读取数据的起始地址</param>
            <param name="lengh">读取的数据长度</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为ASCII
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为Unicode
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.Int16[])">
            <summary>
            向PLC中写入short数据，返回值说明
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <exception cref="T:System.ArgumentNullException">写入的数据不能为空</exception>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.Byte[])">
            <summary>
            向PLC中写入数据，返回值说明
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <exception cref="T:System.ArgumentNullException">写入的数据不能为空</exception>
            <returns>返回写入结果</returns>
        </member>
        <member name="T:HslCommunication.Profinet.SiemensDataType">
            <summary>
            西门子的数据类型
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensDataType.#ctor(System.Byte)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code"></param>
        </member>
        <member name="P:HslCommunication.Profinet.SiemensDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensDataType.M">
            <summary>
            M寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensDataType.I">
            <summary>
            I寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensDataType.Q">
            <summary>
            Q寄存器
            </summary>
        </member>
        <member name="T:HslCommunication.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources._7z">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources._class">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ai">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.aiff">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.arj">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.asc">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.asp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.audio">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.avi">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.bin">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.bmp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.bz2">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.c">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.cdr">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.cfc">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.cfm">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.chm">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.conf">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.cpp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.cs">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.css">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.csv">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.deb">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.divx">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.doc">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.docx">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.eml">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.enc">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.eps">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.exe">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.f4v">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.file">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.flv">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.gif">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.gz">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.hlp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.htm">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.html">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ics">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.image">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.iso">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.jar">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.java">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.jpg">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.js">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.jsp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.lua">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.m">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.mm">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.mov">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.mp3">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.mpg">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.msi">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.odc">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.odf">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.odg">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.odi">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.odp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ods">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.odt">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ogg">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.pdf">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.perl">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.pgp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.php">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.pl">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.png">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ppt">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ps">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.psd">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.py">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.qrcode_for_gh_319218678954_258">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ram">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.rar">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.rb">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.rm">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.rpm">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.rtf">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ruby">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.sig">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.sql">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.svg">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.swf">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.sxc">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.sxd">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.sxi">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.sxw">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.tar">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.tex">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.tgz">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.tif">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ttf">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.txt">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.vb">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.vcf">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.vdo">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.video">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.vsd">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.wav">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.wma">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.xls">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.xml">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.xpi">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.xul">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.xvid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.zip">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="M:HslCommunication.HslSecurity.ByteEncrypt(System.Byte[])">
            <summary>
            加密方法，只对当前的程序集开放
            </summary>
            <param name="enBytes">等待加密的数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.HslSecurity.ByteDecrypt(System.Byte[])">
            <summary>
            解密方法，只对当前的程序集开放
            </summary>
            <param name="deBytes">等待解密的数据</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="T:HslCommunication.Serial.HslCRC">
            <summary>
            用于CRC16验证的类，提供了标准的验证方法
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.HslCRC.CheckCRC16(System.Byte[])">
            <summary>
            校验对应的接收数据的CRC校验码
            </summary>
            <param name="data">需要校验的数据，带CRC校验码</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:HslCommunication.Serial.HslCRC.CRC16(System.Byte[])">
            <summary>
            获取对应的数据的CRC校验码
            </summary>
            <param name="data">需要校验的数据，不包含CRC字节</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="T:HslCommunication.Serial.SerialBase">
            <summary>
            所有串行通信类的基类，提供了一些基础的服务
            </summary>
        </member>
        <member name="F:HslCommunication.Serial.SerialBase.SP_ReadData">
            <summary>
            用于通信的基础串口
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.SerialPortInni(System.String)">
            <summary>
            初始化串口信息
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.SerialPortInni(System.Action{System.IO.Ports.SerialPort})">
            <summary>
            根据自定义初始化方法进行初始化串口信息
            </summary>
        </member>
        <member name="T:HslCommunication.HslTimeOut">
            <summary>
            超时连接的类 [a class use to indicate the time-out of the connection]
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.StartConnectTime">
            <summary>
            开始连接或是请求的时间
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.IsConnected">
            <summary>
            获取或设置是否连接成功，默认为False
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.WorkSocket">
            <summary>
            用于连接或是工作的套接字
            </summary>
        </member>
    </members>
</doc>
